{"ast":null,"code":"import { createSlice, createSelector, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst initialState = {\n  status: 'idle',\n  entities: ''\n};\nexport const fetchTodos = createAsyncThunk('todos/fetchTodos', async () => {\n  const res = await axios.get('http://localhost:5000/todos');\n  return res.data;\n});\nexport const addNewTodo = createAsyncThunk('todos/addNewTodo', async todo => {\n  const res = await axios.post('http://localhost:5000/todo', todo);\n  return res.data;\n});\nconst todosSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    todoDeleted(state, action) {\n      const id = action.payload;\n      delete state.entities[id];\n    },\n\n    todoToggled(state, action) {\n      const id = action.payload;\n      state.entities[id].completed = !state.entities[id].completed;\n    },\n\n    completedTodosDeleted(state, action) {\n      Object.values(state.entities).forEach(todo => {\n        if (todo.completed) {\n          delete state.entities[todo.id];\n        }\n      });\n    }\n\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchTodos.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(fetchTodos.fulfilled, (state, action) => {\n      let todos = {};\n      action.payload.forEach(todo => {\n        todos[todo._id] = todo;\n      });\n      state.entities = todos;\n      state.status = 'idle';\n    }).addCase(addNewTodo.fulfilled, (state, action) => {\n      let todo = action.payload;\n      state.entities[todo.id] = todo;\n    });\n  }\n});\nexport const {\n  todoAdded,\n  todoDeleted,\n  todoToggled,\n  completedTodosDeleted\n} = todosSlice.actions;\nexport default todosSlice.reducer; // selectors \n\nexport const selectFilteredTodos = createSelector(state => state.todos.entities, state => state.filters.status, (todos, filter) => {\n  if (filter == 'all') {\n    return Object.values(todos);\n  }\n\n  if (filter == 'active') {\n    let list = Object.values(todos).filter(todo => !todo.completed);\n    return list;\n  }\n\n  if (filter == 'completed') {\n    let list = Object.values(todos).filter(todo => todo.completed);\n    return list;\n  }\n});","map":{"version":3,"sources":["C:/Users/harsh/todo_fm/client/src/store/todosSlice.js"],"names":["createSlice","createSelector","createAsyncThunk","axios","initialState","status","entities","fetchTodos","res","get","data","addNewTodo","todo","post","todosSlice","name","reducers","todoDeleted","state","action","id","payload","todoToggled","completed","completedTodosDeleted","Object","values","forEach","extraReducers","builder","addCase","pending","fulfilled","todos","_id","todoAdded","actions","reducer","selectFilteredTodos","filters","filter","list"],"mappings":"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","sourcesContent":["import { createSlice, createSelector, createAsyncThunk } from '@reduxjs/toolkit'\r\nimport axios from 'axios'\r\n\r\nconst initialState = {\r\n    status: 'idle',\r\n    entities: '',\r\n}\r\n\r\nexport const fetchTodos = createAsyncThunk('todos/fetchTodos', async () => {\r\n    const res = await axios.get('http://localhost:5000/todos')\r\n    return res.data\r\n})\r\n\r\nexport const addNewTodo = createAsyncThunk('todos/addNewTodo', async todo => {\r\n    const res = await axios.post('http://localhost:5000/todo', todo)\r\n    return res.data \r\n})\r\n\r\nconst todosSlice = createSlice({\r\n    name: 'todos',\r\n    initialState,\r\n    reducers: {\r\n        todoDeleted(state, action) {\r\n            const id = action.payload\r\n            delete state.entities[id]\r\n        },\r\n        todoToggled(state, action) {\r\n            const id = action.payload\r\n            state.entities[id].completed = !state.entities[id].completed\r\n        },\r\n        completedTodosDeleted(state, action) {\r\n            Object.values(state.entities).forEach(todo => {\r\n                if(todo.completed) {\r\n                    delete state.entities[todo.id]\r\n                }\r\n            })\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(fetchTodos.pending, (state, action) => {\r\n                state.status = 'loading'\r\n            })\r\n            .addCase(fetchTodos.fulfilled, (state, action) => {\r\n                let todos = {}\r\n                action.payload.forEach(todo => {\r\n                    todos[todo._id] = todo\r\n                })\r\n                state.entities = todos \r\n                state.status = 'idle'\r\n            })\r\n            .addCase(addNewTodo.fulfilled, (state, action) => {\r\n                let todo = action.payload\r\n                state.entities[todo.id] = todo\r\n            })\r\n    }\r\n})\r\n\r\nexport const {todoAdded, todoDeleted, todoToggled, completedTodosDeleted} = todosSlice.actions\r\n\r\nexport default todosSlice.reducer\r\n\r\n// selectors \r\nexport const selectFilteredTodos = createSelector(\r\n    state => state.todos.entities,\r\n    state => state.filters.status,\r\n    (todos, filter) => {\r\n        if(filter=='all') {\r\n            return Object.values(todos)\r\n        }\r\n        if(filter=='active') {\r\n            let list = Object.values(todos).filter(todo => !todo.completed)\r\n            return list \r\n        }\r\n        if(filter=='completed') {\r\n            let list = Object.values(todos).filter(todo => todo.completed)\r\n            return list \r\n        }\r\n    }\r\n)"]},"metadata":{},"sourceType":"module"}