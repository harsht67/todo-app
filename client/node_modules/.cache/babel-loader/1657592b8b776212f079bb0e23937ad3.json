{"ast":null,"code":"import { createSlice, createSelector, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst initialState = {\n  status: 'idle',\n  entities: {}\n};\nexport const fetchTodos = createAsyncThunk('todos/fetchTodos', async () => {\n  const res = await axios.get('http://localhost:5000/todos');\n  return res.data;\n});\nexport const addNewTodo = createAsyncThunk('todos/addNewTodo', async todo => {\n  const res = await axios.post('http://localhost:5000/todo', todo);\n  return res.data;\n});\nexport const deleteTodo = createAsyncThunk('todos/deleteTodo', async id => {\n  const res = await axios.delete('http://localhost:5000/todo/' + id);\n  return res.data;\n});\nconst todosSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    todoToggled(state, action) {\n      const id = action.payload;\n      state.entities[id].completed = !state.entities[id].completed;\n    },\n\n    completedTodosDeleted(state, action) {\n      Object.values(state.entities).forEach(todo => {\n        if (todo.completed) {\n          delete state.entities[todo._id];\n        }\n      });\n    }\n\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchTodos.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(fetchTodos.fulfilled, (state, action) => {\n      let todos = {};\n      action.payload.forEach(todo => {\n        todos[todo._id] = todo;\n      });\n      state.entities = todos;\n      state.status = 'idle';\n    }).addCase(addNewTodo.fulfilled, (state, action) => {\n      let todo = action.payload;\n      state.entities[todo._id] = todo;\n    }).addCase(deleteTodo.fulfilled, (state, action) => {\n      let id = action.payload;\n      id && delete state.entities[id];\n    });\n  }\n});\nexport const {\n  todoToggled,\n  completedTodosDeleted\n} = todosSlice.actions;\nexport default todosSlice.reducer; // selectors \n\nexport const selectFilteredTodos = createSelector(state => state.todos.entities, state => state.filters.status, (todos, filter) => {\n  if (filter == 'all') {\n    return Object.values(todos);\n  }\n\n  if (filter == 'active') {\n    let list = Object.values(todos).filter(todo => !todo.completed);\n    return list;\n  }\n\n  if (filter == 'completed') {\n    let list = Object.values(todos).filter(todo => todo.completed);\n    return list;\n  }\n});","map":{"version":3,"sources":["C:/Users/harsh/todo_fm/client/src/store/todosSlice.js"],"names":["createSlice","createSelector","createAsyncThunk","axios","initialState","status","entities","fetchTodos","res","get","data","addNewTodo","todo","post","deleteTodo","id","delete","todosSlice","name","reducers","todoToggled","state","action","payload","completed","completedTodosDeleted","Object","values","forEach","_id","extraReducers","builder","addCase","pending","fulfilled","todos","actions","reducer","selectFilteredTodos","filters","filter","list"],"mappings":"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","sourcesContent":["import { createSlice, createSelector, createAsyncThunk } from '@reduxjs/toolkit'\r\nimport axios from 'axios'\r\n\r\nconst initialState = {\r\n    status: 'idle',\r\n    entities: {},\r\n}\r\n\r\nexport const fetchTodos = createAsyncThunk('todos/fetchTodos', async () => {\r\n    const res = await axios.get('http://localhost:5000/todos')\r\n    return res.data\r\n})\r\n\r\nexport const addNewTodo = createAsyncThunk('todos/addNewTodo', async todo => {\r\n    const res = await axios.post('http://localhost:5000/todo', todo)\r\n    return res.data \r\n})\r\n\r\nexport const deleteTodo = createAsyncThunk('todos/deleteTodo', async id => {\r\n    const res = await axios.delete('http://localhost:5000/todo/'+id)\r\n    return res.data\r\n})\r\n\r\nconst todosSlice = createSlice({\r\n    name: 'todos',\r\n    initialState,\r\n    reducers: {\r\n        todoToggled(state, action) {\r\n            const id = action.payload\r\n            state.entities[id].completed = !state.entities[id].completed\r\n        },\r\n        completedTodosDeleted(state, action) {\r\n            Object.values(state.entities).forEach(todo => {\r\n                if(todo.completed) {\r\n                    delete state.entities[todo._id]\r\n                }\r\n            })\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(fetchTodos.pending, (state, action) => {\r\n                state.status = 'loading'\r\n            })\r\n            .addCase(fetchTodos.fulfilled, (state, action) => {\r\n                let todos = {}\r\n                action.payload.forEach(todo => {\r\n                    todos[todo._id] = todo\r\n                })\r\n                state.entities = todos \r\n                state.status = 'idle'\r\n            })\r\n            .addCase(addNewTodo.fulfilled, (state, action) => {\r\n                let todo = action.payload\r\n                state.entities[todo._id] = todo\r\n            })\r\n            .addCase(deleteTodo.fulfilled, (state, action) => {\r\n                let id = action.payload\r\n                id && delete state.entities[id]\r\n            })\r\n    }\r\n})\r\n\r\nexport const { todoToggled, completedTodosDeleted } = todosSlice.actions\r\n\r\nexport default todosSlice.reducer\r\n\r\n// selectors \r\nexport const selectFilteredTodos = createSelector(\r\n    state => state.todos.entities,\r\n    state => state.filters.status,\r\n    (todos, filter) => {\r\n        if(filter=='all') {\r\n            return Object.values(todos)\r\n        }\r\n        if(filter=='active') {\r\n            let list = Object.values(todos).filter(todo => !todo.completed)\r\n            return list \r\n        }\r\n        if(filter=='completed') {\r\n            let list = Object.values(todos).filter(todo => todo.completed)\r\n            return list \r\n        }\r\n    }\r\n)"]},"metadata":{},"sourceType":"module"}