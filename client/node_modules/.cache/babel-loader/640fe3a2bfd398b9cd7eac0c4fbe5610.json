{"ast":null,"code":"import { createSlice, createSelector, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst initialState = {\n  status: 'idle',\n  entities: {}\n};\nexport const fetchTodos = createAsyncThunk('todos/fetchTodos', async () => {\n  const res = await axios.get('http://localhost:5000/todos');\n  return res.data;\n});\nexport const addNewTodo = createAsyncThunk('todos/addNewTodo', async todo => {\n  const res = await axios.post('http://localhost:5000/todo', todo);\n  return res.data;\n});\nexport const toggleTodo = createAsyncThunk('todos/toggleTodo', async todo => {\n  const res = await axios.put('http://localhost:5000/todo', todo);\n  console.log(res.data);\n  return res.data;\n});\nexport const deleteTodo = createAsyncThunk('todos/deleteTodo', async id => {\n  const res = await axios.delete('http://localhost:5000/todo/' + id);\n  return res.data;\n});\nexport const deleteCompletedTodos = createAsyncThunk('todos/deleteCompletedTodos', async () => {\n  const res = await axios.delete('http://localhost:5000/todos');\n  return res.data;\n});\nconst todosSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchTodos.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(fetchTodos.fulfilled, (state, action) => {\n      let todos = {};\n      action.payload.forEach(todo => {\n        todos[todo._id] = todo;\n      });\n      state.entities = todos;\n      state.status = 'idle';\n    }).addCase(addNewTodo.fulfilled, (state, action) => {\n      let todo = action.payload;\n      state.entities[todo._id] = todo;\n    }).addCase(toggleTodo.fulfilled, (state, action) => {\n      let id = action.payload;\n      state.entities[id].completed = !state.entities[id].completed;\n    }).addCase(deleteTodo.fulfilled, (state, action) => {\n      let id = action.payload;\n      id && delete state.entities[id];\n    }).addCase(deleteCompletedTodos.fulfilled, (state, action) => {\n      let res = action.payload;\n      res && Object.values(state.entities).forEach(todo => {\n        if (todo.completed) {\n          delete state.entities[todo._id];\n        }\n      });\n    });\n  }\n});\nexport default todosSlice.reducer; // selectors \n\nexport const selectFilteredTodos = createSelector(state => state.todos.entities, state => state.filters.status, (todos, filter) => {\n  if (filter == 'all') {\n    return Object.values(todos);\n  }\n\n  if (filter == 'active') {\n    let list = Object.values(todos).filter(todo => !todo.completed);\n    return list;\n  }\n\n  if (filter == 'completed') {\n    let list = Object.values(todos).filter(todo => todo.completed);\n    return list;\n  }\n});","map":{"version":3,"sources":["C:/Users/harsh/todo_fm/client/src/store/todosSlice.js"],"names":["createSlice","createSelector","createAsyncThunk","axios","initialState","status","entities","fetchTodos","res","get","data","addNewTodo","todo","post","toggleTodo","put","console","log","deleteTodo","id","delete","deleteCompletedTodos","todosSlice","name","reducers","extraReducers","builder","addCase","pending","state","action","fulfilled","todos","payload","forEach","_id","completed","Object","values","reducer","selectFilteredTodos","filters","filter","list"],"mappings":"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","sourcesContent":["import { createSlice, createSelector, createAsyncThunk } from '@reduxjs/toolkit'\r\nimport axios from 'axios'\r\n\r\nconst initialState = {\r\n    status: 'idle',\r\n    entities: {},\r\n}\r\n\r\nexport const fetchTodos = createAsyncThunk('todos/fetchTodos', async () => {\r\n    const res = await axios.get('http://localhost:5000/todos')\r\n    return res.data\r\n})\r\n\r\nexport const addNewTodo = createAsyncThunk('todos/addNewTodo', async todo => {\r\n    const res = await axios.post('http://localhost:5000/todo', todo)\r\n    return res.data \r\n})\r\n\r\nexport const toggleTodo = createAsyncThunk('todos/toggleTodo', async todo => {\r\n    const res = await axios.put('http://localhost:5000/todo', todo)\r\n    console.log(res.data)\r\n    return res.data \r\n})\r\n\r\nexport const deleteTodo = createAsyncThunk('todos/deleteTodo', async id => {\r\n    const res = await axios.delete('http://localhost:5000/todo/'+id)\r\n    return res.data\r\n})\r\n\r\nexport const deleteCompletedTodos = createAsyncThunk('todos/deleteCompletedTodos', async () => {\r\n    const res = await axios.delete('http://localhost:5000/todos')\r\n    return res.data\r\n})\r\n\r\nconst todosSlice = createSlice({\r\n    name: 'todos',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(fetchTodos.pending, (state, action) => {\r\n                state.status = 'loading'\r\n            })\r\n            .addCase(fetchTodos.fulfilled, (state, action) => {\r\n                let todos = {}\r\n                action.payload.forEach(todo => {\r\n                    todos[todo._id] = todo\r\n                })\r\n                state.entities = todos \r\n                state.status = 'idle'\r\n            })\r\n            .addCase(addNewTodo.fulfilled, (state, action) => {\r\n                let todo = action.payload\r\n                state.entities[todo._id] = todo\r\n            })\r\n            .addCase(toggleTodo.fulfilled, (state, action) => {\r\n                let id = action.payload\r\n                state.entities[id].completed = !state.entities[id].completed\r\n            })\r\n            .addCase(deleteTodo.fulfilled, (state, action) => {\r\n                let id = action.payload\r\n                id && delete state.entities[id]\r\n            })\r\n            .addCase(deleteCompletedTodos.fulfilled, (state, action) => {\r\n                let res = action.payload\r\n                res && \r\n                    Object.values(state.entities).forEach(todo => {\r\n                        if(todo.completed) {\r\n                            delete state.entities[todo._id]\r\n                        }\r\n                    })\r\n            })\r\n    }\r\n})\r\n\r\nexport default todosSlice.reducer\r\n\r\n// selectors \r\nexport const selectFilteredTodos = createSelector(\r\n    state => state.todos.entities,\r\n    state => state.filters.status,\r\n    (todos, filter) => {\r\n        if(filter=='all') {\r\n            return Object.values(todos)\r\n        }\r\n        if(filter=='active') {\r\n            let list = Object.values(todos).filter(todo => !todo.completed)\r\n            return list \r\n        }\r\n        if(filter=='completed') {\r\n            let list = Object.values(todos).filter(todo => todo.completed)\r\n            return list \r\n        }\r\n    }\r\n)"]},"metadata":{},"sourceType":"module"}