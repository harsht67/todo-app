{"ast":null,"code":"import { createSlice, createSelector, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst initialState = {\n  status: 'idle',\n  entities: {}\n};\nexport const fetchTodos = createAsyncThunk('todos/fetchTodos', async () => {\n  const res = await axios.get('http://localhost:5000/todos');\n  return res.data;\n});\nexport const addNewTodo = createAsyncThunk('todos/addNewTodo', async todo => {\n  const res = await axios.post('http://localhost:5000/todo', todo);\n  return res.data;\n});\nexport const deleteTodo = createAsyncThunk('todos/deleteTodo', async id => {\n  const res = await axios.delete('http://localhost:5000/todo/' + id);\n  return res.data;\n});\nexport const deleteCompletedTodos = createAsyncThunk('todos/deleteCompletedTodos', async () => {\n  const res = await axios.delete('http://localhost:5000/todos');\n  return res.data;\n});\nconst todosSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    todoToggled(state, action) {\n      const id = action.payload;\n      state.entities[id].completed = !state.entities[id].completed;\n    }\n\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchTodos.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(fetchTodos.fulfilled, (state, action) => {\n      let todos = {};\n      action.payload.forEach(todo => {\n        todos[todo._id] = todo;\n      });\n      state.entities = todos;\n      state.status = 'idle';\n    }).addCase(addNewTodo.fulfilled, (state, action) => {\n      let todo = action.payload;\n      state.entities[todo._id] = todo;\n    }).addCase(deleteTodo.fulfilled, (state, action) => {\n      let id = action.payload;\n      id && delete state.entities[id];\n    }).addCase(deleteCompletedTodos.fulfilled, (state, action) => {\n      let res = action.payload;\n      res && Object.values(state.entities).forEach(todo => {\n        if (todo.completed) {\n          delete state.entities[todo._id];\n        }\n      });\n    });\n  }\n});\nexport const {\n  todoToggled\n} = todosSlice.actions;\nexport default todosSlice.reducer; // selectors \n\nexport const selectFilteredTodos = createSelector(state => state.todos.entities, state => state.filters.status, (todos, filter) => {\n  if (filter == 'all') {\n    return Object.values(todos);\n  }\n\n  if (filter == 'active') {\n    let list = Object.values(todos).filter(todo => !todo.completed);\n    return list;\n  }\n\n  if (filter == 'completed') {\n    let list = Object.values(todos).filter(todo => todo.completed);\n    return list;\n  }\n});","map":{"version":3,"sources":["C:/Users/harsh/todo_fm/client/src/store/todosSlice.js"],"names":["createSlice","createSelector","createAsyncThunk","axios","initialState","status","entities","fetchTodos","res","get","data","addNewTodo","todo","post","deleteTodo","id","delete","deleteCompletedTodos","todosSlice","name","reducers","todoToggled","state","action","payload","completed","extraReducers","builder","addCase","pending","fulfilled","todos","forEach","_id","Object","values","actions","reducer","selectFilteredTodos","filters","filter","list"],"mappings":"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","sourcesContent":["import { createSlice, createSelector, createAsyncThunk } from '@reduxjs/toolkit'\r\nimport axios from 'axios'\r\n\r\nconst initialState = {\r\n    status: 'idle',\r\n    entities: {},\r\n}\r\n\r\nexport const fetchTodos = createAsyncThunk('todos/fetchTodos', async () => {\r\n    const res = await axios.get('http://localhost:5000/todos')\r\n    return res.data\r\n})\r\n\r\nexport const addNewTodo = createAsyncThunk('todos/addNewTodo', async todo => {\r\n    const res = await axios.post('http://localhost:5000/todo', todo)\r\n    return res.data \r\n})\r\n\r\nexport const deleteTodo = createAsyncThunk('todos/deleteTodo', async id => {\r\n    const res = await axios.delete('http://localhost:5000/todo/'+id)\r\n    return res.data\r\n})\r\n\r\nexport const deleteCompletedTodos = createAsyncThunk('todos/deleteCompletedTodos', async () => {\r\n    const res = await axios.delete('http://localhost:5000/todos')\r\n    return res.data\r\n})\r\n\r\nconst todosSlice = createSlice({\r\n    name: 'todos',\r\n    initialState,\r\n    reducers: {\r\n        todoToggled(state, action) {\r\n            const id = action.payload\r\n            state.entities[id].completed = !state.entities[id].completed\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(fetchTodos.pending, (state, action) => {\r\n                state.status = 'loading'\r\n            })\r\n            .addCase(fetchTodos.fulfilled, (state, action) => {\r\n                let todos = {}\r\n                action.payload.forEach(todo => {\r\n                    todos[todo._id] = todo\r\n                })\r\n                state.entities = todos \r\n                state.status = 'idle'\r\n            })\r\n            .addCase(addNewTodo.fulfilled, (state, action) => {\r\n                let todo = action.payload\r\n                state.entities[todo._id] = todo\r\n            })\r\n            .addCase(deleteTodo.fulfilled, (state, action) => {\r\n                let id = action.payload\r\n                id && delete state.entities[id]\r\n            })\r\n            .addCase(deleteCompletedTodos.fulfilled, (state, action) => {\r\n                let res = action.payload\r\n                res && \r\n                Object.values(state.entities).forEach(todo => {\r\n                    if(todo.completed) {\r\n                        delete state.entities[todo._id]\r\n                    }\r\n                })\r\n            })\r\n    }\r\n})\r\n\r\nexport const { todoToggled } = todosSlice.actions\r\n\r\nexport default todosSlice.reducer\r\n\r\n// selectors \r\nexport const selectFilteredTodos = createSelector(\r\n    state => state.todos.entities,\r\n    state => state.filters.status,\r\n    (todos, filter) => {\r\n        if(filter=='all') {\r\n            return Object.values(todos)\r\n        }\r\n        if(filter=='active') {\r\n            let list = Object.values(todos).filter(todo => !todo.completed)\r\n            return list \r\n        }\r\n        if(filter=='completed') {\r\n            let list = Object.values(todos).filter(todo => todo.completed)\r\n            return list \r\n        }\r\n    }\r\n)"]},"metadata":{},"sourceType":"module"}