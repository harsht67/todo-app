{"ast":null,"code":"import { createSlice, createSelector } from '@reduxjs/toolkit';\nconst initialState = {\n  1: {\n    id: 1,\n    completed: true,\n    text: 'complete online javascript course'\n  },\n  2: {\n    id: 2,\n    completed: false,\n    text: 'jog around the park 3x'\n  },\n  3: {\n    id: 3,\n    completed: false,\n    text: '10 minutes meditation'\n  },\n  4: {\n    id: 4,\n    completed: false,\n    text: 'read for 1 hour'\n  }\n};\nconst todosSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    todoAdded(state, action) {\n      const todo = action.payload;\n      state[todo.id] = todo;\n    },\n\n    todoDeleted(state, action) {\n      const id = action.payload;\n      delete state[id];\n    },\n\n    todoToggled(state, action) {\n      const id = action.payload;\n      state[id].completed = !state[id].completed;\n    },\n\n    completedTodosDeleted(state, action) {\n      Object.values(state).forEach(todo => {\n        if (todo.completed) {\n          delete state[todo.id];\n        }\n      });\n    }\n\n  }\n});\nexport const {\n  todoAdded,\n  todoDeleted,\n  todoToggled,\n  completedTodosDeleted\n} = todosSlice.actions;\nexport default todosSlice.reducer;\nexport const selectFilteredTodos = createSelector(state => state.todos, state => state.filters.status, (todos, filter) => {\n  if (filter == 'all') {\n    return Object.values(todos);\n  }\n\n  if (filter == 'active') {\n    return todos.filter(todo => !todo.completed);\n  }\n\n  if (filter == 'completed') {\n    return todos.filter(todo => todo.completed);\n  }\n});","map":{"version":3,"sources":["C:/Users/harsh/todo_fm/src/store/todosSlice.js"],"names":["createSlice","createSelector","initialState","id","completed","text","todosSlice","name","reducers","todoAdded","state","action","todo","payload","todoDeleted","todoToggled","completedTodosDeleted","Object","values","forEach","actions","reducer","selectFilteredTodos","todos","filters","status","filter"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C;AAEA,MAAMC,YAAY,GAAG;AACjB,KAAG;AACCC,IAAAA,EAAE,EAAE,CADL;AAECC,IAAAA,SAAS,EAAE,IAFZ;AAGCC,IAAAA,IAAI,EAAE;AAHP,GADc;AAMjB,KAAG;AACCF,IAAAA,EAAE,EAAE,CADL;AAECC,IAAAA,SAAS,EAAE,KAFZ;AAGCC,IAAAA,IAAI,EAAE;AAHP,GANc;AAWjB,KAAG;AACCF,IAAAA,EAAE,EAAE,CADL;AAECC,IAAAA,SAAS,EAAE,KAFZ;AAGCC,IAAAA,IAAI,EAAE;AAHP,GAXc;AAgBjB,KAAG;AACCF,IAAAA,EAAE,EAAE,CADL;AAECC,IAAAA,SAAS,EAAE,KAFZ;AAGCC,IAAAA,IAAI,EAAE;AAHP;AAhBc,CAArB;AAuBA,MAAMC,UAAU,GAAGN,WAAW,CAAC;AAC3BO,EAAAA,IAAI,EAAE,OADqB;AAE3BL,EAAAA,YAF2B;AAG3BM,EAAAA,QAAQ,EAAE;AACNC,IAAAA,SAAS,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACrB,YAAMC,IAAI,GAAGD,MAAM,CAACE,OAApB;AACAH,MAAAA,KAAK,CAACE,IAAI,CAACT,EAAN,CAAL,GAAiBS,IAAjB;AACH,KAJK;;AAKNE,IAAAA,WAAW,CAACJ,KAAD,EAAQC,MAAR,EAAgB;AACvB,YAAMR,EAAE,GAAGQ,MAAM,CAACE,OAAlB;AACA,aAAOH,KAAK,CAACP,EAAD,CAAZ;AACH,KARK;;AASNY,IAAAA,WAAW,CAACL,KAAD,EAAQC,MAAR,EAAgB;AACvB,YAAMR,EAAE,GAAGQ,MAAM,CAACE,OAAlB;AACAH,MAAAA,KAAK,CAACP,EAAD,CAAL,CAAUC,SAAV,GAAsB,CAACM,KAAK,CAACP,EAAD,CAAL,CAAUC,SAAjC;AACH,KAZK;;AAaNY,IAAAA,qBAAqB,CAACN,KAAD,EAAQC,MAAR,EAAgB;AACjCM,MAAAA,MAAM,CAACC,MAAP,CAAcR,KAAd,EAAqBS,OAArB,CAA6BP,IAAI,IAAI;AACjC,YAAGA,IAAI,CAACR,SAAR,EAAmB;AACf,iBAAOM,KAAK,CAACE,IAAI,CAACT,EAAN,CAAZ;AACH;AACJ,OAJD;AAKH;;AAnBK;AAHiB,CAAD,CAA9B;AA0BA,OAAO,MAAM;AAACM,EAAAA,SAAD;AAAYK,EAAAA,WAAZ;AAAyBC,EAAAA,WAAzB;AAAsCC,EAAAA;AAAtC,IAA+DV,UAAU,CAACc,OAAhF;AAEP,eAAed,UAAU,CAACe,OAA1B;AAEA,OAAO,MAAMC,mBAAmB,GAAGrB,cAAc,CAC7CS,KAAK,IAAIA,KAAK,CAACa,KAD8B,EAE7Cb,KAAK,IAAIA,KAAK,CAACc,OAAN,CAAcC,MAFsB,EAG7C,CAACF,KAAD,EAAQG,MAAR,KAAmB;AACf,MAAGA,MAAM,IAAE,KAAX,EAAkB;AACd,WAAOT,MAAM,CAACC,MAAP,CAAcK,KAAd,CAAP;AACH;;AACD,MAAGG,MAAM,IAAE,QAAX,EAAqB;AAEjB,WAAOH,KAAK,CAACG,MAAN,CAAad,IAAI,IAAI,CAACA,IAAI,CAACR,SAA3B,CAAP;AACH;;AACD,MAAGsB,MAAM,IAAE,WAAX,EAAwB;AACpB,WAAOH,KAAK,CAACG,MAAN,CAAad,IAAI,IAAIA,IAAI,CAACR,SAA1B,CAAP;AACH;AACJ,CAd4C,CAA1C","sourcesContent":["import { createSlice, createSelector } from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n    1: {\r\n        id: 1,\r\n        completed: true,\r\n        text: 'complete online javascript course',\r\n    },\r\n    2: {\r\n        id: 2,\r\n        completed: false,\r\n        text: 'jog around the park 3x',\r\n    },\r\n    3: {\r\n        id: 3,\r\n        completed: false,\r\n        text: '10 minutes meditation',\r\n    },\r\n    4: {\r\n        id: 4,\r\n        completed: false,\r\n        text: 'read for 1 hour',\r\n    },\r\n}\r\n\r\nconst todosSlice = createSlice({\r\n    name: 'todos',\r\n    initialState,\r\n    reducers: {\r\n        todoAdded(state, action) {\r\n            const todo = action.payload\r\n            state[todo.id] = todo\r\n        },\r\n        todoDeleted(state, action) {\r\n            const id = action.payload\r\n            delete state[id]\r\n        },\r\n        todoToggled(state, action) {\r\n            const id = action.payload\r\n            state[id].completed = !state[id].completed\r\n        },\r\n        completedTodosDeleted(state, action) {\r\n            Object.values(state).forEach(todo => {\r\n                if(todo.completed) {\r\n                    delete state[todo.id]\r\n                }\r\n            })\r\n        }\r\n    }\r\n})\r\n\r\nexport const {todoAdded, todoDeleted, todoToggled, completedTodosDeleted} = todosSlice.actions\r\n\r\nexport default todosSlice.reducer\r\n\r\nexport const selectFilteredTodos = createSelector(\r\n    state => state.todos,\r\n    state => state.filters.status,\r\n    (todos, filter) => {\r\n        if(filter=='all') {\r\n            return Object.values(todos)\r\n        }\r\n        if(filter=='active') {\r\n\r\n            return todos.filter(todo => !todo.completed)\r\n        }\r\n        if(filter=='completed') {\r\n            return todos.filter(todo => todo.completed)\r\n        }\r\n    }\r\n)"]},"metadata":{},"sourceType":"module"}